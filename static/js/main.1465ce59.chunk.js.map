{"version":3,"sources":["components/Wrapper/Wrapper.js","components/ScoreBar/ScoreBar.js","components/GokuCard/GokuCard.js","App.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","ScoreBar","message","currentScore","bestScore","GokuCard","onClick","clickGoku","id","alt","name","src","image","App","state","goku","gokuClick","_this","filter","player","clicked","newScore","newBestScore","setState","gokuShuffle","handleLossChange","array","i","length","j","Math","floor","random","_ref","this","map","obj","_this2","ScoreBar_ScoreBar","components_Wrapper_Wrapper","components_GokuCard_GokuCard","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"q3EAWeA,MARf,SAAiBC,GACb,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,WCY7BC,MAdf,SAAkBN,GACd,OAAQC,EAAAC,EAAAC,cAAA,cACJF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,WACKH,EAAMO,SAEXN,EAAAC,EAAAC,cAAA,+BACoBH,EAAMQ,aAD1B,kBACuDR,EAAMS,oBCC1DC,MARf,SAAkBV,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaO,QAAS,kBAAMX,EAAMY,UAAUZ,EAAMa,MAC7DZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWU,IAAKd,EAAMe,KAAMC,IAAKhB,EAAMiB,iBCmGnDC,6MAlGbC,MAAQ,CACNC,OACAZ,aAAc,EACdC,UAAW,EACXF,QAAS,kEAGXK,UAAY,SAAAC,GACV,IAAMQ,EAAYC,EAAKH,MAAMC,KAAKG,OAAO,SAAAC,GAAM,OAAIA,EAAOX,KAAOA,IAGjE,IAA6B,IAAzBQ,EAAU,GAAGI,QAAmB,CAClCJ,EAAU,GAAGI,SAAU,EACvB,IAAIC,EAAWJ,EAAKH,MAAMX,aAAe,EACrCmB,EAAgBD,EAAWJ,EAAKH,MAAMV,UAAaiB,EAAWJ,EAAKH,MAAMV,UAC7Ea,EAAKM,SAAS,CACZpB,aAAckB,EACdjB,UAAWkB,EACXpB,QAAS,0BAGXe,EAAKO,YAAYT,QAIjBE,EAAKO,YAAYT,GACjBE,EAAKQ,sBAyCTD,YAAc,SAAAE,GACZ,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAG,EAAGA,IAAK,CACxC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAG,IADCM,EAEjB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFiCM,EAAA,GAE7BP,EAAMG,GAFuBI,EAAA,uFAnC1CC,KAAKX,SAAS,CACZpB,aAAa,EACbD,QAAS,oCACTa,KAAMA,EAAKoB,IAAI,SAAAC,GACb,OAAOA,EAAIhB,SAAU,uCAqClB,IAAAiB,EAAAH,KACP,OACEtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwC,EAAD,CACEnC,aAAc+B,KAAKpB,MAAMX,aACzBC,UAAW8B,KAAKpB,MAAMV,UACtBF,QAASgC,KAAKpB,MAAMZ,UAEtBN,EAAAC,EAAAC,cAACyC,EAAD,KACGL,KAAKpB,MAAMC,KAAKoB,IAAI,SAAApB,GAAI,OACvBnB,EAAAC,EAAAC,cAAC0C,EAAD,CACEhC,GAAIO,EAAKP,GACTiC,IAAK1B,EAAKP,GACVE,KAAMK,EAAKL,KACXE,MAAOG,EAAKH,MACZL,UAAa8B,EAAK9B,uBA1FdmC,aCDlBC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.1465ce59.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nfunction Wrapper(props) {\n    return (<div className=\"wrapper\">{props.children}</div>);\n}\n\n// Wrapper = (props) => (\n//     <div className=\"wrapper\">{props.children}</div>\n// )\n\nexport default Wrapper;","import React from \"react\";\n\nfunction ScoreBar(props) {\n    return (<header>\n        <div>\n            <h1>Clicky-Game</h1>\n            <div>\n                {props.message}\n            </div>\n            <score>\n                Current Score: {props.currentScore} | Best Score: {props.bestScore}\n            </score>\n        </div>\n    </header>)\n}\n\nexport default ScoreBar ","import React from \"react\";\nimport \"./GokuCard.css\"\n\nfunction GokuCard(props) {\n    return (\n        <div className=\"GokuButton\" onClick={() => props.clickGoku(props.id)}>\n            <img className=\"GokuCard\" alt={props.name} src={props.image}/>\n        </div>\n    )\n}\n\nexport default GokuCard","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport ScoreBar from \"./components/ScoreBar/ScoreBar\";\nimport GokuCard from './components/GokuCard/GokuCard';\nimport goku from \"./goku.json\"\n\nclass App extends Component {\n  state = {\n    goku,\n    currentScore: 0,\n    bestScore: 0,\n    message: \"Click a Goku to Begin! Don't click the same Goku form twice!\",\n  }\n\n  clickGoku = id => {\n    const gokuClick = this.state.goku.filter(player => player.id === id);\n    // console.log(\"this is the one I clicked \" + JSON.stringify(gokuClick));\n    \n    if (gokuClick[0].clicked === false) {\n      gokuClick[0].clicked = true;\n      let newScore = this.state.currentScore + 1\n      let newBestScore = (newScore > this.state.bestScore) ? newScore : this.state.bestScore\n      this.setState({\n        currentScore: newScore,\n        bestScore: newBestScore,\n        message: \"Good Job! Keep going!\",\n        // goku: goku.map(goku[0] => ({goku[0], clicked: true}))\n      })\n      this.gokuShuffle(goku);\n      // console.log(\"this is the one I clicked after the change\" + JSON.stringify(gokuClick));\n    }\n    else {\n      this.gokuShuffle(goku);\n      this.handleLossChange();\n      // console.log(\"this is the array that should be set to clicked:false \" + JSON.stringify(goku, null, 2));\n\n    }\n  }\n\n  handleLossChange() {\n    this.setState({\n      currentScore:0,\n      message: \"Game over, refresh to start over!\",\n      goku: goku.map(obj => {\n        return obj.clicked = false\n      })\n    });\n    // console.log(\"what is in me \" + JSON.stringify(this.state.goku, null, 2));\n  }\n\n  // clickGoku = id => {\n  //   const gokuClick = this.state.goku.filter(player => player.id === id);\n  //   console.log (gokuClick);\n  //   this.gokuShuffle(goku)\n  //   if (gokuClick[0].clicked === false) {\n  //     gokuClick[0].clicked = true;\n  //     let newScore = this.state.currentScore + 1\n  //     let newBestScore = (newScore > this.state.bestScore) ? newScore : this.state.bestScore\n  //     this.setState({\n  //       currentScore: newScore,\n  //       bestScore: newBestScore,\n  //       message: \"Good Job! Keep going!\",\n  //       goku: goku.map(goku[0] => ({goku[0], clicked: true}))\n  //     })\n  //   }\n  //   else {\n  //     this.setState({\n  //       currentScore:0,\n  //       message: \"Game over, click a Goku to start over!\",\n  //       goku: goku.map(goku => ({...goku, clicked: false}))\n  //     })\n  //   }\n  // }\n\n  gokuShuffle = array => {\n    for (let i = array.length - 1; i> 0; i--) {\n      let j = Math.floor(Math.random() * (i +1));\n      [array[i], array[j]] = [array[j], array[i]]\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <ScoreBar\n          currentScore={this.state.currentScore}\n          bestScore={this.state.bestScore}\n          message={this.state.message}\n        />\n        <Wrapper>\n          {this.state.goku.map(goku => (\n            <GokuCard\n              id={goku.id}\n              key={goku.id}\n              name={goku.name}\n              image={goku.image}\n              clickGoku = {this.clickGoku}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}